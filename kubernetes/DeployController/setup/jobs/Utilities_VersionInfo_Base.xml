<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.13">
  <actions/>
  <description>This is the job use to run the versionInfo.sh inside of Utilities docker to check current version.&#xd;
&#xd;
This is the sample for your reference about how to launch scripts inside of container.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Tenant</name>
          <description></description>
          <defaultValue>demo</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EnvName</name>
          <description></description>
          <defaultValue>qa</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EnvType</name>
          <description></description>
          <defaultValue>auth</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>UtilitiesDockerTag</name>
          <description>The default Docker repository is ${dockerRepoHost}/commerce/ts-utils</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>FullConfig</name>
          <description>Set it to ignore the environment configuration, because some scripts not rely on the environment configuration data</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>true</string>
              <string>false</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.36.1">
    <script>def label = &quot;run-utility_job-${UUID.randomUUID().toString()}&quot;
podTemplate(label: label,  containers: [
     containerTemplate(
            name: &apos;utility&apos;,
            image: &quot;${dockerRepoHost}/commerce/ts-utils:${UtilitiesDockerTag}&quot;,
            ttyEnabled: true,
            privileged: true,
            command: &apos;cat&apos;,
            alwaysPullImage: true,
            envVars: [
                containerEnvVar(key: &apos;VAULT_TOKEN&apos;, value: &quot;${vault_token}&quot;),
                containerEnvVar(key: &apos;VAULT_URL&apos;, value: &quot;${vault_url}&quot;),
                containerEnvVar(key: &apos;TENANT&apos;, value: &quot;${Tenant}&quot;),
                containerEnvVar(key: &apos;ENVIRONMENT&apos;, value: &quot;${EnvName}&quot;),
                containerEnvVar(key: &apos;ENVTYPE&apos;, value: &quot;${EnvType}&quot;),
                containerEnvVar(key: &apos;STOREWEB_HOST&apos;, value: &quot;Null&quot;),
                containerEnvVar(key: &apos;CONFIGURE_MODE&apos;, value: &apos;Vault&apos;),
                containerEnvVar(key: &apos;LICENSE&apos;, value: &apos;accept&apos;)
            ]
        ),
    containerTemplate(
            name: &apos;jnlp&apos;,
            image: &quot;${dockerRepoHost}/commerce/jnlp-slave:alpine&quot;,
            args: &apos;${computer.jnlpmac} ${computer.name}&apos;,
            command: &apos;&apos;

        )
  ]
  ) 
{
    node (label) {
        container(&apos;utility&apos;) {
            stage(&apos;Full Configure Utilities Docker Image&apos;) {
                 script {
                   if(env.FullConfig == &apos;true&apos;){
                      sh(&quot;/SETUP/bin/entrypoint_once.sh&quot;)
                   }
                 }
            }
            stage(&apos;Run Command VersionInfo In Utilities Docker Image&apos;) {
                 script {
                   sh(&quot;/opt/WebSphere/CommerceServer90/bin/versionInfo.sh&quot;)
                 }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>